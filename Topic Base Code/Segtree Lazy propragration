ll tree[4 * N], lazy[4 * N];

struct stree{

    void push(int node, int l, int r){
        if(lazy[node] == 0){
            return;
        }
        tree[node] = lazy[node] * (r - l + 1);
        if(l != r){
            lazy[2 * node] = lazy[node];
            lazy[2 * node + 1] = lazy[node];
        }
        lazy[node] = 0;
    }

    void build(int node, int l, int r){
        lazy[node] = 0;
        if(l == r){
             tree[node] = a[l];
             return;
        }

        int mid = (l + r) >> 1;
        build(2 * node, l, mid);
        build(2 * node + 1, mid + 1, r);
        tree[node] = tree[2 * node] + tree[2 * node + 1];
    }
    void update(int node, int l, int r, int i, int j, int v){
        push(node, l, r);
        if(r < i or j < l){
            return;
        }
        if(i <= l and r <= j){
            lazy[node] = v;
            push(node, l, r);
            return;
        }
        int mid = (l + r) >> 1;
        update(2 * node, l, mid, i, j, v);
        update(2 * node + 1, mid + 1, r, i, j, v);
        tree[node] = tree[2 * node] + tree[2 * node + 1];
    }
    ll query(int node, int l, int r, int i, int j){
        push(node, l, r);
        if(r < i or j < l){
            return 0;
        }
        if(i <= l and r <= j){
            return tree[node];
        }
        int mid = (l + r) >> 1;
        ll x = query(2 * node, l, mid, i, j);
        ll y = query(2 * node + 1, mid + 1, r, i, j);
        return x + y;
    }
};
stree st;
